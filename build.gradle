buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    ext {
        serenityGradlePluginVersion = '3.3.0'
        serenityVersion = '3.3.4'
        serenityCucumberVersion = '3.3.4'

        junitVersion = '5.9.0'
        slf4jVersion = '2.0.1'
        assertjVersion = '3.23.1'
    }
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:$rootProject.ext.serenityGradlePluginVersion")
    }
}

plugins {
    id "net.serenity-bdd.serenity-gradle-plugin" version "3.3.0"
    id 'java'
    id 'eclipse'
    id 'idea'
}

group 'com.cedaniel200'
version '1.0-SNAPSHOT'

java.sourceCompatibility = JavaVersion.VERSION_1_8

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    implementation "net.serenity-bdd:serenity-screenplay:$rootProject.ext.serenityVersion"
    implementation "net.serenity-bdd:serenity-screenplay-webdriver:$rootProject.ext.serenityVersion"

    testImplementation "net.serenity-bdd:serenity-core:$rootProject.ext.serenityVersion"
    testImplementation "net.serenity-bdd:serenity-junit5:$rootProject.ext.serenityVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$rootProject.ext.junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$rootProject.ext.junitVersion"
    testImplementation "net.serenity-bdd:serenity-cucumber:$rootProject.ext.serenityCucumberVersion"
    testImplementation "org.assertj:assertj-core:$rootProject.ext.assertjVersion"
    testImplementation "org.slf4j:slf4j-simple:$rootProject.ext.slf4jVersion"
}

serenity {
    reports = ["single-page-html"]
    // // Specify the root package of any JUnit acceptance tests
    testRoot="com.cedaniel200.automatizacion"
}

test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
}

tasks.withType(Test) {
    systemProperties = System.properties as Map<String, String>
    maxParallelForks = Runtime.runtime.availableProcessors()
}

gradle.startParameter.continueOnFailure = true